enum Position {
    Bull
    Bear
    House
}

type Market @entity {
    id: ID!

    epoch: Round
    paused: Boolean!

    # Users
    totalUsers: BigInt!

    # Bets
    totalBets: BigInt!
    totalBetsBull: BigInt!
    totalBetsBear: BigInt!
    totalMATIC: BigDecimal!
    totalMATICBull: BigDecimal!
    totalMATICBear: BigDecimal!
    totalMATICTreasury: BigDecimal!

    # Statistics
    totalBetsClaimed: BigInt!
    totalMATICClaimed: BigDecimal!
    winRate: BigDecimal!
    averageMATIC: BigDecimal!
    netMATIC: BigDecimal!
}

type Round @entity {
    id: ID!

    epoch: BigInt!
    position: Position
    failed: Boolean

    previous: Round

    # Start
    startAt: BigInt!
    startBlock: BigInt!
    startHash: Bytes!

    # Lock
    lockAt: BigInt
    lockBlock: BigInt
    lockHash: Bytes
    lockPrice: BigDecimal
    lockRoundId: BigInt

    # End
    closeAt: BigInt
    closeBlock: BigInt
    closeHash: Bytes
    closePrice: BigDecimal
    closeRoundId: BigInt

    # Bets
    totalBets: BigInt!
    totalAmount: BigDecimal!
    bullBets: BigInt!
    bullAmount: BigDecimal!
    bearBets: BigInt!
    bearAmount: BigDecimal!
    bets: [Bet!]! @derivedFrom(field: "round")
}

type User @entity {
    id: ID!

    createdAt: BigInt!
    updatedAt: BigInt!

    block: BigInt!

    # Bets
    totalBets: BigInt!
    totalBetsBull: BigInt!
    totalBetsBear: BigInt!
    totalMATIC: BigDecimal!
    totalMATICBull: BigDecimal!
    totalMATICBear: BigDecimal!
    bets: [Bet!]! @derivedFrom(field: "user")

    # Statistics
    totalBetsClaimed: BigInt!
    totalMATICClaimed: BigDecimal!
    winRate: BigDecimal!
    averageMATIC: BigDecimal!
    netMATIC: BigDecimal!
}

type Bet @entity {
    id: ID!

    # epoch
    round: Round!

    user: User!
    hash: Bytes!

    amount: BigDecimal!
    position: Position!

    claimed: Boolean!
    claimedAt: BigInt
    claimedBlock: BigInt
    claimedHash: Bytes
    claimedMATIC: BigDecimal
    claimedNetMATIC: BigDecimal

    createdAt: BigInt!
    updatedAt: BigInt!

    block: BigInt!
}